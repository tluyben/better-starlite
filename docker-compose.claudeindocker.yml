services:
  claudeindocker:
    image: node:20-bookworm
    container_name: ${CONTAINER_NAME}
    environment:
      - HOST_UID=${HOST_UID}
      - HOST_GID=${HOST_GID}
      - SKIP_PLAYWRIGHT_INSTALL=${SKIP_PLAYWRIGHT_INSTALL:-false}
    volumes:
      - ${PWD}:${PWD}
      - node_modules_volume:${PWD}/node_modules
      - ${HOME}/.claude:/home/claude/.claude
      - ${HOME}/.claude.json:/tmp/host_claude.json:ro
      - ${HOME}/.gitconfig:/home/claude/.gitconfig:ro
    working_dir: ${PWD}
    command: >
      sh -c '
        # Check if environment variables are set
        if [ -z "$${HOST_UID}" ] || [ -z "$${HOST_GID}" ]; then
            echo "ERROR: HOST_UID or HOST_GID environment variables are not set!"
            echo "HOST_UID=$${HOST_UID}, HOST_GID=$${HOST_GID}"
            exit 1
        fi
        
        echo "Setting up container with UID=$${HOST_UID}, GID=$${HOST_GID}"
        
        # Remove any existing user/group that has our desired UID/GID
        EXISTING_USER=$(getent passwd $${HOST_UID} | cut -d: -f1)
        EXISTING_GROUP=$(getent group $${HOST_GID} | cut -d: -f1)
        
        if [ -n "$${EXISTING_USER}" ]; then
            echo "Removing existing user with UID=$${HOST_UID}: $${EXISTING_USER}"
            userdel -r $${EXISTING_USER} 2>/dev/null || true
        fi
        
        if [ -n "$${EXISTING_GROUP}" ]; then
            echo "Removing existing group with GID=$${HOST_GID}: $${EXISTING_GROUP}"
            groupdel $${EXISTING_GROUP} 2>/dev/null || true
        fi
        
        # Create claude group with the host GID
        echo "Creating group claude with GID=$${HOST_GID}"
        groupadd -g $${HOST_GID} claude || {
            echo "ERROR: Failed to create group claude with GID=$${HOST_GID}"
            exit 1
        }
        
        # Create claude user with the host UID
        echo "Creating user claude with UID=$${HOST_UID}"
        useradd -u $${HOST_UID} -g claude -d /home/claude -m -s /bin/bash claude || {
            echo "ERROR: Failed to create user claude with UID=$${HOST_UID}"
            exit 1
        }
        
        # Verify user has correct UID/GID
        echo "User claude created with UID/GID: $(id claude)"
        
        # Ensure claude owns its home directory properly
        mkdir -p /home/claude
        chown -R claude:claude /home/claude
        
        # Copy .claude.json from host if it exists
        if [ -f /tmp/host_claude.json ]; then
            cp /tmp/host_claude.json /home/claude/.claude.json
            chown claude:claude /home/claude/.claude.json
            echo "Copied .claude.json from host"
        fi
        
        # Install Claude CLI globally
        echo "Installing Claude CLI..."
        npm install -g @anthropic-ai/claude-code --force || echo "Claude CLI install failed, may already be installed"
        
        # Install system dependencies as root
        echo "Installing system dependencies as root..."
        apt update 
        apt install -y jq net-tools lynx vim sqlite3
        
        # Install Playwright system dependencies as root (before switching to claude user)
        if [ "$${SKIP_PLAYWRIGHT_INSTALL}" != "true" ]; then
            echo "Installing Playwright system dependencies as root..."
            npx -y playwright install-deps chromium || true
        fi

        # Fix ownership of node_modules to match the claude user
        chown -R claude:claude $${PWD}/node_modules 2>/dev/null || true
        
        # Switch to claude user and set up environment
        su claude -c "
          cd $${PWD}
          
          # Export the SKIP_PLAYWRIGHT_INSTALL variable
          export SKIP_PLAYWRIGHT_INSTALL=$${SKIP_PLAYWRIGHT_INSTALL}
          
          # Conditionally install Playwright and configure MCP as claude user
          if [ \"$${SKIP_PLAYWRIGHT_INSTALL}\" != \"true\" ]; then
              echo \"Installing Playwright chromium browser as claude user...\"
              npx -y playwright install chromium || true
              
              echo \"Finding installed Chrome binary path...\"
              CHROME_BIN=$(ls $HOME/.cache/ms-playwright/chromium*/chrome-linux/chrome 2>/dev/null | head -n1)
              
              if [ -n \"$${CHROME_BIN}\" ] && [ -f \"$${CHROME_BIN}\" ]; then
                  echo \"Found Chrome binary at: $${CHROME_BIN}\"
                  
                  echo \"Removing any existing playwright MCP...\"
                  claude mcp remove playwright 2>/dev/null || true
                  
                  echo \"Adding Playwright MCP with --isolated flag...\"
                  claude mcp add playwright -s user -- \
                    npx @playwright/mcp@latest \
                    --headless \
                    --isolated \
                    --executable-path \"$${CHROME_BIN}\" \
                    || echo \"MCP already exists or failed\"
                  
                  echo \"Verifying MCP installation...\"
                  claude mcp list
              else
                  echo \"ERROR: Could not find Chrome binary after Playwright install\"
                  echo \"Actual contents of ms-playwright directory:\"
                  ls -la $HOME/.cache/ms-playwright/ || true
              fi
          else
              echo \"SKIPPING Playwright installation and MCP configuration\"
          fi          

          # Install npm dependencies if package.json exists
          if [ -f package.json ]; then
            echo \"Installing npm dependencies...\"
            npm install
          fi
          
          echo \"\"
          echo \"================================================\"
          echo \"Starting Claude CLI\"
          echo \"Working directory: $${PWD}\"
          echo \"User: $(id)\"
          echo \"\"
          echo \"Type 'exit' or press Ctrl+D to leave Claude\"
          echo \"================================================\"
          echo \"\"
          
          # Start Claude CLI directly with --dangerously-skip-permissions
          exec claude --dangerously-skip-permissions
        "
      '
    stdin_open: true
    tty: true

volumes:
  node_modules_volume:
    name: ${VOLUME_NAME}
